Pr_n = sapply(n, function(j) sum(N_t[[t]] == j) / nsim)
# B)
esp_n = mean(N_t[[t]])
S_t[[t]] = numeric(nsim)
for(i in 1:nsim){
N_t[[t]][i] = rpois(1, lambda)
X = rgamma(N_t[[t]][i], alpha[2], beta[2])
S_t[[t]][i] = sum( X )
x_t[[t]] = c(x_t[[t]], X)
}
y = numeric()
y
x_t[[t]] = numeric()
for(i in 1:nsim){
N_t[[t]][i] = rpois(1, lambda)
X = rgamma(N_t[[t]][i], alpha[2], beta[2])
S_t[[t]][i] = sum( X )
x_t[[t]] = x_t[[t]] +  X
}
# A) P(N_i(t) = n) , n = 0,1,...,10
n = 0:10
Pr_n = sapply(n, function(j) sum(N_t[[t]] == j) / nsim)
library(dplyr)
alpha = c(3,2)
beta = c(0.5, 1500)
lambda = alpha[1] * beta[1]
set.seed(2545)
nsim = 1e5
# Simulation
N_t = list()
S_t = list()
x_t = list()
t = 1
N_t[[t]] = numeric(nsim)
S_t[[t]] = numeric(nsim)
x_t[[t]] = numeric()
for(i in 1:nsim){
N_t[[t]][i] = rpois(1, lambda)
X = rgamma(N_t[[t]][i], alpha[2], beta[2])
S_t[[t]][i] = sum( X )
x_t[[t]] = x_t[[t]] +  X
}
# A) P(N_i(t) = n) , n = 0,1,...,10
n = 0:10
Pr_n = sapply(n, function(j) sum(N_t[[t]] == j) / nsim)
# B)
esp_n = mean(N_t[[t]])
library(dplyr)
alpha = c(3,2)
beta = c(0.5, 1500)
lambda = alpha[1] * beta[1]
set.seed(2545)
nsim = 1e6
# Simulation
N_t = list()
S_t = list()
x_t = list()
t = 1
N_t[[t]] = numeric(nsim)
S_t[[t]] = numeric(nsim)
x_t[[t]] = numeric()
for(i in 1:nsim){
N_t[[t]][i] = rpois(1, lambda)
X = rgamma(N_t[[t]][i], alpha[2], beta[2])
S_t[[t]][i] = sum( X )
x_t[[t]] = x_t[[t]] +  X
}
# A) P(N_i(t) = n) , n = 0,1,...,10
n = 0:10
Pr_n = sapply(n, function(j) sum(N_t[[t]] == j) / nsim)
# B)
esp_n = mean(N_t[[t]])
x_t[[t]]
library(dplyr)
alpha = c(3,2)
beta = c(0.5, 1500)
lambda = alpha[1] * beta[1]
set.seed(2545)
nsim = 1e6
# Simulation
N_t = list()
S_t = list()
x_t = list()
t = 1
N_t[[t]] = numeric(nsim)
S_t[[t]] = numeric(nsim)
x_t[[t]] = numeric()
for(i in 1:nsim){
N_t[[t]][i] = rpois(1, lambda)
X = rgamma(N_t[[t]][i], alpha[2], beta[2])
S_t[[t]][i] = sum( X )
x_t[[t]] = c(x_t[[t]], X)
}
nsim = 1e5
# Simulation
N_t = list()
S_t = list()
x_t = list()
t = 1
N_t[[t]] = numeric(nsim)
S_t[[t]] = numeric(nsim)
x_t[[t]] = numeric()
for(i in 1:nsim){
N_t[[t]][i] = rpois(1, lambda)
X = rgamma(N_t[[t]][i], alpha[2], beta[2])
S_t[[t]][i] = sum( X )
x_t[[t]] = c(x_t[[t]], X)
}
# A) P(N_i(t) = n) , n = 0,1,...,10
n = 0:10
Pr_n = sapply(n, function(j) sum(N_t[[t]] == j) / nsim)
# B)
esp_n = mean(N_t[[t]])
x_t
rgamma(10, alpha[2], beta[2])
library(dplyr)
alpha = c(3,2)
beta = c(0.5, 1500)
lambda = alpha[1] * beta[1]
set.seed(2545)
nsim = 1e5
# Simulation
N_t = list()
S_t = list()
x_t = list()
t = 1
N_t[[t]] = numeric(nsim)
S_t[[t]] = numeric(nsim)
x_t[[t]] = numeric()
for(i in 1:nsim){
N_t[[t]][i] = rpois(1, lambda)
X = rgamma(N_t[[t]][i], alpha[2], scale = beta[2])
S_t[[t]][i] = sum( X )
x_t[[t]] = c(x_t[[t]], X)
}
# A) P(N_i(t) = n) , n = 0,1,...,10
n = 0:10
Pr_n = sapply(n, function(j) sum(N_t[[t]] == j) / nsim)
# B)
esp_n = mean(N_t[[t]])
esp_x = mean(x_t[[t]])
# C)
var_n = var(N_t[[t]])
var_x = var(x_t[[t]])
alpha[2] * beta[2]^2
# D)
esp_s = mean(S_t[[t]])
var_s = var(S_t[[t]])
esp_s
var_s = var(S_t[[t]])
var_s
# Simulation
N_t = list()
# Simulation
N_t = list()
S_t = list()
library(dplyr)
alpha = c(3,2)
beta = c(0.5, 1500)
lambda = alpha[1] * beta[1]
set.seed(2545)
nsim = 1e5
# Simulation
N_t = list()
S_t = list()
x_t = list()
Pr_n = list()
esp_n = list()
var_n = list()
esp_x = list()
var_x = list()
esp_s = list()
var_s = list()
for(t in 1:5){
N_t[[t]] = numeric(nsim)
S_t[[t]] = numeric(nsim)
x_t[[t]] = numeric()
for(i in 1:nsim){
N_t[[t]][i] = rpois(1, lambda)
X = rgamma(N_t[[t]][i], alpha[2], scale = beta[2])
S_t[[t]][i] = sum( X )
x_t[[t]] = c(x_t[[t]], X)
}
# A) P(N_i(t) = n) , n = 0,1,...,10
n = 0:10
Pr_n[[t]] = sapply(n, function(j) sum(N_t[[t]] == j) / nsim)
# B)
esp_n[[t]] = mean(N_t[[t]])
esp_x[[t]] = mean(x_t[[t]])
# C)
var_n[[t]] = var(N_t[[t]])
var_x[[t]] = var(x_t[[t]])
# D)
esp_s[[t]] = mean(S_t[[t]])
var_s[[t]] = var(S_t[[t]])
}
esp_s[[1]]
esp_s[[2]]
esp_s[[3]]
library(xtable)
as.data.frame(esp_n)
# Output Latex
xtable(data.frame(esp_n))
data.frame(esp_n)
# Output Latex
xtable(data.frame(t_1 = esp_n[[1]],
t_2 = esp_n[[2]],
t_3 = esp_n[[3]],
t_4 = esp_n[[4]],
t_5 = esp_n[[5]]))
# Output Latex
xtable(data.frame(t_1 = esp_n[[1]],
t_2 = esp_n[[2]],
t_3 = esp_n[[3]],
t_4 = esp_n[[4]],
t_5 = esp_n[[5]]), digits = 4)
# Output Latex
output = c("esp_n", "var_n", "esp_x", "var_x", "esp_s", "var_s")
for(out in output){
xtable(data.frame(t_1 = eval(parse(text = out))[[1]],
t_2 = eval(parse(text = out))[[2]],
t_3 = eval(parse(text = out))[[3]],
t_4 = eval(parse(text = out))[[4]],
t_5 = eval(parse(text = out))[[5]]), digits = 4)
}
# Output Latex
output = c("esp_n", "var_n", "esp_x", "var_x", "esp_s", "var_s")
for(out in output){
print(out)
xtable(data.frame(t_1 = eval(parse(text = out))[[1]],
t_2 = eval(parse(text = out))[[2]],
t_3 = eval(parse(text = out))[[3]],
t_4 = eval(parse(text = out))[[4]],
t_5 = eval(parse(text = out))[[5]]), digits = 4)
}
# Output Latex
output = c("esp_n", "var_n", "esp_x", "var_x", "esp_s", "var_s")
for(out in output){
print(xtable(data.frame(t_1 = eval(parse(text = out))[[1]],
t_2 = eval(parse(text = out))[[2]],
t_3 = eval(parse(text = out))[[3]],
t_4 = eval(parse(text = out))[[4]],
t_5 = eval(parse(text = out))[[5]]), digits = 4) )
}
# Output Latex
output = c("esp_n", "var_n", "esp_x", "var_x", "esp_s", "var_s")
for(out in output){
print(xtable(data.frame(t_1 = eval(parse(text = out))[[1]],
t_2 = eval(parse(text = out))[[2]],
t_3 = eval(parse(text = out))[[3]],
t_4 = eval(parse(text = out))[[4]],
t_5 = eval(parse(text = out))[[5]]), digits = 4), hline.after = TRUE )
}
output = "esp_n"
for(out in output){
print(xtable(data.frame(t_1 = eval(parse(text = out))[[1]],
t_2 = eval(parse(text = out))[[2]],
t_3 = eval(parse(text = out))[[3]],
t_4 = eval(parse(text = out))[[4]],
t_5 = eval(parse(text = out))[[5]]), digits = 4),  )
}
library(dplyr)
library(xtable)
# Choisir pour quel processus on fait les simulations, i = 1,2
i = 1
alpha = c(3,2)
beta = c(0.5, 1500)
lambda = alpha[1] * beta[1]
set.seed(2545)
nsim = 1e5
### Calcul du processus de poisson ordinaire ###
# Simulation
N_t = list()
S_t = list()
x_t = list()
Pr_n = list()
esp_n = list()
var_n = list()
esp_x = list()
var_x = list()
esp_s = list()
var_s = list()
# Effectue le calcules pour les différents t
for(t in 1:5){
N_t[[t]] = numeric(nsim)
S_t[[t]] = numeric(nsim)
x_t[[t]] = numeric()
for(i in 1:nsim){
# Simule n_t selon le processus choisi (i = 1,2)
if(i == 1){
N_t[[t]][i] = rpois(1, lambda * t)
}else if(i == 2){
N_t[[t]][i] = rpois(1, rgamma(1, alpha[1], beta[1]) * t)
}else{
stop("Choisir un i valide")
}
X = rgamma(N_t[[t]][i], alpha[2], scale = beta[2])
x_t[[t]] = c(x_t[[t]], X)
S_t[[t]][i] = sum( X )
}
# A) P(N_i(t) = n) , n = 0,1,...,10
n = 0:10
Pr_n[[t]] = sapply(n, function(j) sum(N_t[[t]] == j) / nsim)
# B)
esp_n[[t]] = mean(N_t[[t]])
esp_x[[t]] = mean(x_t[[t]])
# C)
var_n[[t]] = var(N_t[[t]])
var_x[[t]] = var(x_t[[t]])
# D)
esp_s[[t]] = mean(S_t[[t]])
var_s[[t]] = var(S_t[[t]])
}
l = c(1,2,3)
l += c(4)
l = l + c(4)
l
l = c(1,2,3)
l = c(l, 4)
l
library(dplyr)
library(xtable)
# Choisir pour quel processus on fait les simulations, i = 1,2
i = 1
alpha = c(3,2)
beta = c(0.5, 1500)
lambda = alpha[1] * beta[1]
set.seed(2545)
nsim = 1e5
### Calcul du processus de poisson ordinaire ###
# Initialisation des listes contenants les réponses pour le processus i
N_t = list()
S_t = list()
x_t = list()
Pr_n = list()
esp_n = list()
var_n = list()
esp_x = list()
var_x = list()
esp_s = list()
var_s = list()
# Effectue le calcules pour les différents t
for(t in 1:5){
N_t[[t]] = numeric(nsim)
S_t[[t]] = numeric(nsim)
x_t[[t]] = numeric()
for(j in 1:nsim){
# Simule n_t selon le processus choisi (i = 1,2)
if(i == 1){
N_t[[t]][j] = rpois(1, lambda * t)
}else if(i == 2){
N_t[[t]][j] = rpois(1, rgamma(1, alpha[1], beta[1]) * t)
}else{
stop("Choisir un i valide")
}
X = rgamma(N_t[[t]][j], alpha[2], scale = beta[2])
x_t[[t]] = c(x_t[[t]], X)
S_t[[t]][j] = sum( X )
}
# A) P(N_i(t) = n) , n = 0,1,...,10
n = 0:10
Pr_n[[t]] = sapply(n, function(j) sum(N_t[[t]] == j) / nsim)
# B)
esp_n[[t]] = mean(N_t[[t]])
esp_x[[t]] = mean(x_t[[t]])
# C)
var_n[[t]] = var(N_t[[t]])
var_x[[t]] = var(x_t[[t]])
# D)
esp_s[[t]] = mean(S_t[[t]])
var_s[[t]] = var(S_t[[t]])
}
# Output des valeurs de simulations en tableau latex pour le rapport
choix_output = c("esp_n", "var_n", "esp_x", "var_x", "esp_s", "var_s", "Pr_n")
output = "Pr_n"
for(out in output){
print(xtable(data.frame(t_1 = eval(parse(text = out))[[1]],
t_2 = eval(parse(text = out))[[2]],
t_3 = eval(parse(text = out))[[3]],
t_4 = eval(parse(text = out))[[4]],
t_5 = eval(parse(text = out))[[5]]), digits = 4))
}
0.9^4/4
0.9^5/5
5*4*(0.164025 - 0.118098)
1- 0.91854
# Valeur théorique pour Pr_n pour le processus i=1:
prob.n_t <- function(lambda, t, n){
(lambda * t)^n * exp(- lambda * t) / factorial(n)
}
théorique.Pr_n = lapply(1:5, prob.n_t(lambda = lambda, n = 1:10))
### Nicholas langevin
##  Processus stochastique
#   Devoir
library(dplyr)
library(xtable)
# Choisir pour quel processus on fait les simulations, i = 1,2
i = 1
alpha = c(3,2)
beta = c(0.5, 1500)
lambda = alpha[1] * beta[1]
set.seed(2545)
nsim = 1e5
### Calcul du processus de poisson ordinaire ###
# Initialisation des listes contenants les réponses pour le processus i
N_t = list()
S_t = list()
x_t = list()
Pr_n = list()
esp_n = list()
var_n = list()
esp_x = list()
var_x = list()
esp_s = list()
var_s = list()
# Effectue le calcules pour les différents t
for(t in 1:5){
N_t[[t]] = numeric(nsim)
S_t[[t]] = numeric(nsim)
x_t[[t]] = numeric()
for(j in 1:nsim){
# Simule n_t selon le processus choisi (i = 1,2)
if(i == 1){
N_t[[t]][j] = rpois(1, lambda * t)
}else if(i == 2){
N_t[[t]][j] = rpois(1, rgamma(1, alpha[1], beta[1]) * t)
}else{
stop("Choisir un i valide")
}
X = rgamma(N_t[[t]][j], alpha[2], scale = beta[2])
x_t[[t]] = c(x_t[[t]], X)
S_t[[t]][j] = sum( X )
}
# A) P(N_i(t) = n) , n = 0,1,...,10
n = 0:10
Pr_n[[t]] = sapply(n, function(j) sum(N_t[[t]] == j) / nsim)
# B)
esp_n[[t]] = mean(N_t[[t]])
esp_x[[t]] = mean(x_t[[t]])
# C)
var_n[[t]] = var(N_t[[t]])
var_x[[t]] = var(x_t[[t]])
# D)
esp_s[[t]] = mean(S_t[[t]])
var_s[[t]] = var(S_t[[t]])
}
théorique.Pr_n = lapply(1:5, prob.n_t(t, lambda = lambda, n = 1:10))
théorique.Pr_n = lapply(1:5, function(t) sapply(n = 0:10, prob.n_t(lambda = lambda, t, n)))
théorique.Pr_n = lapply(1:5, function(t) sapply(0:10, prob.n_t(lambda = lambda, t, n)))
théorique.Pr_n = lapply(1:5, function(t) sapply(0:10, prob.n_t(lambda = lambda, t)))
théorique.Pr_n = lapply(1:5, function(t) sapply(0:10, prob.n_t, lambda = lambda, t = t ))
théorique.Pr_n
print(xtable(data.frame(t_1 = théorique.Pr_n[[1]],
t_2 = théorique.Pr_n[[2]],
t_3 = théorique.Pr_n[[3]],
t_4 = théorique.Pr_n[[4]],
t_5 = théorique.Pr_n[[5]]), digits = 4))
### Nicholas langevin
##  Processus stochastique
#   Devoir
library(dplyr)
library(xtable)
# Choisir pour quel processus on fait les simulations, i = 1,2
i = 1
alpha = c(3,2)
beta = c(0.5, 1500)
lambda = alpha[1] * beta[1]
set.seed(2545)
nsim = 1e5
### Calcul du processus de poisson ordinaire ###
# Initialisation des listes contenants les réponses pour le processus i
N_t = list()
S_t = list()
x_t = list()
Pr_n = list()
esp_n = list()
var_n = list()
esp_x = list()
var_x = list()
esp_s = list()
var_s = list()
# Effectue le calcules pour les différents t
for(t in 1:5){
N_t[[t]] = numeric(nsim)
S_t[[t]] = numeric(nsim)
x_t[[t]] = numeric()
for(j in 1:nsim){
# Simule n_t selon le processus choisi (i = 1,2)
if(i == 1){
N_t[[t]][j] = rpois(1, lambda * t)
}else if(i == 2){
N_t[[t]][j] = rpois(1, rgamma(1, alpha[1], beta[1]) * t)
}else{
stop("Choisir un i valide")
}
X = rgamma(N_t[[t]][j], alpha[2], scale = beta[2])
x_t[[t]] = c(x_t[[t]], X)
S_t[[t]][j] = sum( X )
}
# A) P(N_i(t) = n) , n = 0,1,...,10
n = 0:10
Pr_n[[t]] = sapply(n, function(j) sum(N_t[[t]] == j) / nsim)
# B)
esp_n[[t]] = mean(N_t[[t]])
esp_x[[t]] = mean(x_t[[t]])
# C)
var_n[[t]] = var(N_t[[t]])
var_x[[t]] = var(x_t[[t]])
# D)
esp_s[[t]] = mean(S_t[[t]])
var_s[[t]] = var(S_t[[t]])
}
